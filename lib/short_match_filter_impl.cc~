/* -*- c++ -*- */
/* 
 * Copyright 2015 <+YOU OR YOUR COMPANY+>.
 * 
 * This is free software; you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation; either version 3, or (at your option)
 * any later version.
 * 
 * This software is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * 
 * You should have received a copy of the GNU General Public License
 * along with this software; see the file COPYING.  If not, write to
 * the Free Software Foundation, Inc., 51 Franklin Street,
 * Boston, MA 02110-1301, USA.
 */

#ifdef HAVE_CONFIG_H
#include "config.h"
#endif


#include <iostream>

#include <gnuradio/io_signature.h>
#include "short_match_filter_impl.h"

#include <list>
#include <tuple>

using namespace std;

namespace gr {
  namespace ofdm_80211 {

    short_match_filter::sptr
    short_match_filter::make()
    {
      return gnuradio::get_initial_sptr
        (new short_match_filter_impl());
    }

    /*
     * The private constructor
     */
    short_match_filter_impl::short_match_filter_impl()
            : gr::block("short_match_filter",
              gr::io_signature::make(1, 1, sizeof(gr_complex)),
              gr::io_signature::make(1, 1, sizeof(gr_complex) )  )
    {  testo =   gr_complex(-0.0455, -1.0679) ;
	//CORTO = { gr_complex( 1.3868,  0.0000), gr_complex(-0.0455, -1.0679)};
      // vector_complejo = {gr_complex( 1.3868,  0.0000), gr_complex(-0.0455, -1.0679)};


 }

    /*
     * Our virtual destructor.
     */
    short_match_filter_impl::~short_match_filter_impl()
    {
    }

    void
    short_match_filter_impl::forecast (int noutput_items, gr_vector_int &ninput_items_required)
    {
        /* <+forecast+> e.g. ninput_items_required[0] = noutput_items */
	ninput_items_required[0] = noutput_items;
    }

    int
    short_match_filter_impl::general_work (int noutput_items,
                       gr_vector_int &ninput_items,
                       gr_vector_const_void_star &input_items,
                       gr_vector_void_star &output_items)
    {
        const gr_complex *in = (const gr_complex*) input_items[0];
        
	gr_complex *out = (gr_complex*)output_items[0];

        // Do <+signal processing+>
		
		cout << "noutput_items " << noutput_items  << endl;

		for(int i= 0; i < noutput_items; i++){
		out[i] = in[i];
		    if(i==1 ){ cout << "CORTO"   <<endl; }

		}	
		
		
        // Tell runtime system how many input items we consumed on
        // each input stream.
        consume_each (noutput_items);

        // Tell runtime system how many output items we produced.
        return noutput_items;
    }

  } /* namespace ofdm_80211 */
} /* namespace gr */



//const std::vector<gr_complex> short_match_filter::CORTO = { gr_complex( 1.3868,  0.0000), gr_complex(-0.0455, -1.0679)};




